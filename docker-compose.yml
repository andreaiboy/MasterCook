# Versión de Docker Compose utilizada
version: '3.8'
# Definición de los servicios (contenedores)
services:
  # Servicio: backend (Flask)
  auth:
    # Construye la imagen Docker desde la carpeta ./backend (donde está el Dockerfile)
    build: ./backend/auth
    # Expone el puerto 5000 del contenedor en el puerto 5000 del host
    ports:
      - "5001:5000"
    # Espera a que el contenedor de la base de datos esté listo antes de arrancar
    depends_on:
      - db
    # Variables de entorno usadas por Flask para conectarse a MySQL
    environment:
      - MYSQL_HOST=db # nombre del contenedor de la BD
      - MYSQL_USER=root
      - MYSQL_PASSWORD=12345
      - MYSQL_DATABASE=mastercook_db
   # Servicio: backend (Flask)
  pagos:
    # Construye la imagen Docker desde la carpeta ./backend (donde está el Dockerfile)
    build: ./backend/pagos
    # Expone el puerto 5000 del contenedor en el puerto 5000 del host
    ports:
      - "5002:5000"
    # Espera a que el contenedor de la base de datos esté listo antes de arrancar
    depends_on:
      - db
    # Variables de entorno usadas por Flask para conectarse a MySQL
    environment:
      - MYSQL_HOST=db # nombre del contenedor de la BD
      - MYSQL_USER=root
      - MYSQL_PASSWORD=12345
      - MYSQL_DATABASE=mastercook_db
    # Servicio: base de datos MySQL
   # Servicio: backend (Flask)
  reservas:
    # Construye la imagen Docker desde la carpeta ./backend (donde está el Dockerfile)
    build: ./backend/reservas
    # Expone el puerto 5000 del contenedor en el puerto 5000 del host
    ports:
      - "5003:5000"
    # Espera a que el contenedor de la base de datos esté listo antes de arrancar
    depends_on:
      - db
    # Variables de entorno usadas por Flask para conectarse a MySQL
    environment:
      - MYSQL_HOST=db # nombre del contenedor de la BD
      - MYSQL_USER=root
      - MYSQL_PASSWORD=12345
      - MYSQL_DATABASE=mastercook_db
   # Servicio: backend (Flask)
  talleres:
    # Construye la imagen Docker desde la carpeta ./backend (donde está el Dockerfile)
    build: ./backend/talleres
    # Expone el puerto 5000 del contenedor en el puerto 5000 del host
    ports:
      - "5004:5000"
    # Espera a que el contenedor de la base de datos esté listo antes de arrancar
    depends_on:
      - db
    # Variables de entorno usadas por Flask para conectarse a MySQL
    environment:
      - MYSQL_HOST=db # nombre del contenedor de la BD
      - MYSQL_USER=root
      - MYSQL_PASSWORD=12345
      - MYSQL_DATABASE=mastercook_db
  singupo:
    # Construye la imagen Docker desde la carpeta ./backend (donde está el Dockerfile)
    build: ./backend/singupo
    # Expone el puerto 5000 del contenedor en el puerto 5000 del host
    ports:
      - "5005:5000"
    # Espera a que el contenedor de la base de datos esté listo antes de arrancar
    depends_on:
      - db
    # Variables de entorno usadas por Flask para conectarse a MySQL
    environment:
      - MYSQL_HOST=db # nombre del contenedor de la BD
      - MYSQL_USER=root
      - MYSQL_PASSWORD=12345
      - MYSQL_DATABASE=mastercook_db

  db:
    # Utiliza la imagen oficial de MySQL 8.0
    image: mysql:8.0
    # Siempre intenta reiniciarse si se detiene
    restart: always
    # Variables de entorno para crear la base de datos al iniciar
    environment:
      - MYSQL_ROOT_PASSWORD=12345 # contraseña del root
      - MYSQL_DATABASE=mastercook_db # nombre de la BD que se creará
    # Expone el puerto 3306 de MySQL para conexión externa (opcional en este caso)
    ports:
      - "3307:3306"
    # Monta un volumen para ejecutar automáticamente scripts de inicialización
    volumes:
      - ./mysql-init:/docker-entrypoint-initdb.d
    # Servicio: frontend (React)
  frontend:
    # Construye la imagen Docker desde la carpeta ./frontend
    build: ./frontend
    # Expone el puerto 3000 del contenedor en el puerto 3000 del host
    ports:
      - "3000:3000"
    # Se asegura de que el backend esté corriendo antes de iniciar este servicio
    depends_on:
      - auth
      - pagos
      - reservas
      - talleres
    environment:
      - REACT_APP_AUTH_API=http://auth:5000
      - REACT_APP_PAGOS_API=http://pagos:5000
      - REACT_APP_RESERVAS_API=http://reservas:5000
      - REACT_APP_TALLERES_API=http://talleres:5000